# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoProjekt https://github.com/vealen/PracowniaTM.git
                                 A QGIS plugin
 Auto Projekt pracowniaTM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Piotr Fiodor
        email                : pfiodor@taxusul.com.pl
 ***************************************************************************/


"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog, QApplication,QDialogButtonBox, QProgressDialog, QProgressBar, QMenu
from qgis.core import *
import webbrowser
import shutil
import win32clipboard

from qgis import processing
# Initialize Qt resources from file resources.py

from .resources import *
# Import the code for the dialog
from .pracownia_tm_dialog import PracowniaTmDialog
import os
import time
from .algorytmy import *




class PracowniaTm:
    """QGIS Plugin Implementation."""
    OWN_WARSTWY= ['o_podst.shp','pnsw.shp','oddz.shp','ob_liniowe.shp','wydz_tm.shp']
    EWIDENCJA= ['dz.shp','ls.shp','obr.shp','uz.shp','bud.shp','g_subarea.shp','wydz_old.shp','dz_lpis.shp']
    BDOT = ['bagno.shp','budynki.shp','ciek1.shp','drogi.shp','kolej.shp','l_energ.shp','wody.shp','ciek2.shp']
    LIDAR = ['korony.shp','zreby_lidar.shp','fishnet_wys_nowsze.shp','fishnet_wys_starsze.shp','korony.shp','hp.shp','hp_obr.shp','zreby.shp']
    CRS = QgsCoordinateReferenceSystem(2180) #CS92
    POINT = QgsWkbTypes.PointGeometry
    POLYGON = QgsWkbTypes.PolygonGeometry
    LINE = QgsWkbTypes.LineGeometry

    TAKS = False
    TAKSEWD = False
    WEKT = False
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PracowniaTm_{}.qm'.format(locale))
        print(self.iface)
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'TAXUS')
        self.men = QMenu("&TAXUS", iface.mainWindow().menuBar())
        actions = iface.mainWindow().menuBar().actions()
        self.lastAction = actions[-1]

        self.algorytmy = PracowniaTM_algorytmy()


        PracowniaTm.get_wlasne_warstwy_dir.has_been_called = False
        PracowniaTm.get_ewd_dir.has_been_called = False
        PracowniaTm.get_bdot_dir.has_been_called = False
        PracowniaTm.get_lidar_dir.has_been_called = False
        PracowniaTm.get_misc.has_been_called = False
        PracowniaTm.get_wydz_old.has_been_called = False
        PracowniaTm.get_folder_dir.has_been_called = False
        PracowniaTm.get_wektoryzacja.has_been_called = False
        PracowniaTm.get_baza.has_been_called = False
        PracowniaTm.get_orto_dir.has_been_called = False
        PracowniaTm.get_wydzTm_dir.has_been_called = False

        #QgsProject.instance().setCrs(self.CRS)
        self.warstwy_do_dodania = {'WARSTWY':[],
                                   'EWD':[],
                                   'BDOT10K':[],
                                   'ORTO': [],
                                   'LIDAR':[],
                                   'WEKT':[],
                                   'MISC':[]
                                   }
        self.ortoo = {}
        self.obreby = []
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.style = {
            'WARSTWY':
                {'o_podst.shp': self.resolve('O_PODST_qgis.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'pnsw.shp': self.resolve('PNSW_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'oddz.shp': self.resolve('ODDZ_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'ob_liniowe.shp': self.resolve("OB_liniowe_qgis.qml",bonus='STYL_WARSTWY_TM_QGIS'),
                 'wydz_tm.shp': self.resolve('WYDZ_TM.qml',bonus='STYL_WARSTWY_TM_QGIS')},
            'EWIDENCJA':
                {'dz.shp': self.resolve('DZ_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'dz_lpis.shp': self.resolve('DZ_qgis.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'ls.shp': self.resolve('LS_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'obr.shp': self.resolve('OBR_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'uz.shp': self.resolve('UZ.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'g_subarea.shp': self.resolve('G_SUBAREA_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'bud.shp': self.resolve('BUD.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'wydz_old.shp': self.resolve('WYDZ_OLD_PLUS_WYS.qml',bonus='STYL_WARSTWY_TM_QGIS')},
            'BDOT10K':
                {'bagno.shp': self.resolve('BAGNA.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'budynki.shp': self.resolve('BUD.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'bud.shp': self.resolve('BUD.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'ciek1.shp': self.resolve('CIEKI.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'ciek2.shp': self.resolve('CIEKI.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'ciek3.shp': self.resolve('CIEKI.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'cieki.shp': self.resolve('CIEKI.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'drogi.shp': self.resolve('DR.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'dr.shp': self.resolve('DR.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'kolej.shp': self.resolve('KOLEJ.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'l_energ.shp': self.resolve('L_ENERG.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'wody.shp': self.resolve('WODY.qml',bonus='STYL_WARSTWY_TM_QGIS')},
            'LIDAR':
                {'korony.shp': self.resolve('KORONY_qgis.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'zreby_lidar.shp': self.resolve('ZREBY.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'zreby.shp': self.resolve('ZREBY.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'hp.shp': self.resolve('HighPoints.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'hp_obr.shp': self.resolve('HighPoints.qml', bonus='STYL_WARSTWY_TM_QGIS'),
                 'fishnet_wys_nowsze.shp': self.resolve('Fishnet_wys_nowsze.qml',bonus='STYL_WARSTWY_TM_QGIS'),
                 'fishnet_wys_starsze.shp': self.resolve('Fishnet_wys_starsze.qml',bonus='STYL_WARSTWY_TM_QGIS')},

        }

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PracowniaTm', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        menu=None,
        enabled_flag=True,
        checkable = False,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        action.setCheckable(checkable)
        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            #self.iface.addPluginToMenu(
             #   self.menu,
              #  action)
            menu.addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        auto_icon_path = ':/plugins/pracownia_tm/icon.png'
        #dodanie menu taxus
        self.iface.mainWindow().menuBar().insertMenu(self.lastAction, self.men)

        self.iconAction = self.add_action(
            auto_icon_path,
            menu=self.men,
            text=self.tr(u'Pracownia TM'),
            callback=self.run,
            parent=self.iface.mainWindow()
        )



        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&TAXUS'),
                action)
            self.iface.removeToolBarIcon(action)
            self.iface.mainWindow().menuBar().removeAction(self.men.menuAction())
    def clear_orto(self):
        self.ortoo.clear()
        self.dlg.rasterList.clear()
        self.warstwy_do_dodania['ORTO'].clear()
        self.dlg.rasterLabel.setText('')
        self.dlg.rasterProgressBar.setValue(0)
    def clear_category(self, category, callflag, categorylist=None):
        if callflag == True:
            category.clear()
            if categorylist:
                try:
                    categorylist.clear()
                except:
                    print('Dobra nie udało się, ale nie przejmuj się')
    def clear_listView(self):
        try:
            self.wektoryzacja.clear()
            self.rastry.clear()
            self.misc.clear()
            self.ewd.clear()
            self.bdot.clear()
            self.lidar.clear()
        except:
            print('nie lekajcie sie')


        self.dlg.warstwyList.clear()
        self.dlg.rasterList.clear()
        self.dlg.ewdList.clear()
        self.dlg.bdotList.clear()
        self.dlg.warstwyLabel.setText('')
        self.dlg.lidarLabel.setText('')
        self.dlg.wektLabel.setText('')
        self.dlg.miscLabel.setText('')
        self.dlg.bdotLabel.setText('')
        self.dlg.rasterLabel.setText('')
        self.dlg.ewdLabel.setText('')
        self.dlg.lidarList.clear()
        self.dlg.miscList.clear()
        self.dlg.wektList.clear()
        self.dlg.wydzOldLine.setText('')

        self.clear_orto()
        self.clear_category(category=self.dlg.warstwyList, categorylist=self.warstwy_do_dodania['WARSTWY'],callflag=PracowniaTm.get_wlasne_warstwy_dir.has_been_called)
        self.clear_category(category=self.dlg.lidarList, categorylist=self.warstwy_do_dodania['LIDAR'], callflag=PracowniaTm.get_lidar_dir.has_been_called)
        self.clear_category(category=self.dlg.bdotList, categorylist=self.warstwy_do_dodania['BDOT10K'], callflag=PracowniaTm.get_bdot_dir.has_been_called)
        self.clear_category(category=self.dlg.ewdList, categorylist=self.warstwy_do_dodania['EWD'], callflag=PracowniaTm.get_ewd_dir.has_been_called)
        self.clear_category(category=self.dlg.wektList, categorylist=self.warstwy_do_dodania['WEKT'], callflag=PracowniaTm.get_wektoryzacja.has_been_called)
        self.clear_category(category=self.dlg.miscList, categorylist=self.warstwy_do_dodania['MISC'], callflag=PracowniaTm.get_misc.has_been_called)

    def clear_progressBars(self):
        self.dlg.rasterProgressBar.setValue(0)
        self.dlg.ewdProgressBar.setValue(0)
        self.dlg.warstwyProgressBar.setValue(0)
        self.dlg.bdotProgressBar.setValue(0)
        self.dlg.lidarProgressBar.setValue(0)
        self.dlg.wektProgressBar.setValue(0)
        self.dlg.miscProgresBar.setValue(0)
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PracowniaTmDialog()
            #self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

            self.dlg.rasterButton.clicked.connect(self.get_orto_dir)
            self.dlg.warstwyButton.clicked.connect(self.get_wlasne_warstwy_dir)
            self.dlg.ewdButton.clicked.connect(self.get_ewd_dir)
            self.dlg.bdotButton.clicked.connect(self.get_bdot_dir)
            self.dlg.lidarButton.clicked.connect(self.get_lidar_dir)
            self.dlg.miscButton.clicked.connect(self.get_misc)
            self.dlg.clearButton.clicked.connect(self.clear_listView)
            self.dlg.clearButton.clicked.connect(self.clear_progressBars)
            self.dlg.button_box.button(QDialogButtonBox.Reset).clicked.connect(self.clear_progressBars)
            self.dlg.button_box.button(QDialogButtonBox.Reset).clicked.connect(self.clear_listView)
            self.dlg.button_box.button(QDialogButtonBox.Help).clicked.connect(lambda: self.algorytmy.help_img(self.dlg))
            self.dlg.adrForButton.clicked.connect(self.adr_for)
            self.dlg.createAdrNewButton.clicked.connect(self.create_adr_new)
            self.dlg.multiplyButton.clicked.connect(self.multiply_wydz)
            self.dlg.autoMpButton.clicked.connect(self.multiparty)
            self.dlg.wydzKontrButton.clicked.connect(self.wydz_kontr)
            self.dlg.wydzOddzButton.clicked.connect(self.wydz_w_oddz)
            self.dlg.wydzOldButton.clicked.connect(self.get_wydz_old)
            self.dlg.folderButton.clicked.connect(self.get_folder_dir)
            self.dlg.xeroButton.clicked.connect(self.xero)
            self.dlg.clearFolderButton.clicked.connect(self.clear_kopiowanie)
            self.dlg.clearBazaButton.clicked.connect(self.clear_baza)
            self.dlg.taksEwdRadio.toggled.connect(self.highlight_taksEwd)
            self.dlg.taksRadio.toggled.connect(self.highlight_taks)
            self.dlg.wektRadio.toggled.connect(self.highlight_wekt)
            self.dlg.wektButton.clicked.connect(self.get_wektoryzacja)
            self.dlg.bazaButton.clicked.connect(self.get_baza)
            self.dlg.bat.clicked.connect(lambda:self.algorytmy.help_img2(self.dlg))
            self.dlg.wydzTmButton.clicked.connect(self.get_wydzTm_dir)
            self.dlg.clearWydzTmButton.clicked.connect(self.clear_wydzTm)
            self.dlg.copyLsButton.clicked.connect(self.copy_ls_to_opodst_EZ)
            self.dlg.obrAddButton.clicked.connect(self.addObrtoCb)
            self.dlg.obrClearButton.clicked.connect(self.clearobr)
            self.dlg.helpAlgorytmyButton.clicked.connect(lambda: self.algorytmy.help(self.dlg))
            self.dlg.clearOrtoButton.clicked.connect(self.clear_orto)
            self.dlg.bazaCopyButton.clicked.connect(self.get_baza_dir)
            #self.dlg.clearOrtoButton.clicked.connect(lambda: self.clear_category(category=self.dlg.rasterList,categorylist=self.warstwy_do_dodania['ORTO'], callflag = PracowniaTm.get_orto_dir.has_been_called))
            self.dlg.clearWarstwyButton.clicked.connect(lambda: self.clear_category(category=self.dlg.warstwyList,categorylist=self.warstwy_do_dodania['WARSTWY'], callflag = PracowniaTm.get_wlasne_warstwy_dir.has_been_called))
            self.dlg.clearLidarButton.clicked.connect(lambda: self.clear_category(category=self.dlg.lidarList,categorylist=self.warstwy_do_dodania['LIDAR'], callflag = PracowniaTm.get_lidar_dir.has_been_called))
            self.dlg.clearBdotButton.clicked.connect(lambda: self.clear_category(category=self.dlg.bdotList,categorylist=self.warstwy_do_dodania['BDOT10K'], callflag = PracowniaTm.get_bdot_dir.has_been_called))
            self.dlg.clearEwdButton.clicked.connect(lambda: self.clear_category(category=self.dlg.ewdList,categorylist=self.warstwy_do_dodania['EWD'], callflag = PracowniaTm.get_ewd_dir.has_been_called))
            self.dlg.clearWektButton.clicked.connect(lambda: self.clear_category(category=self.dlg.wektList,categorylist=self.warstwy_do_dodania['WEKT'], callflag = PracowniaTm.get_wektoryzacja.has_been_called))
            self.dlg.clearMiscButton.clicked.connect(lambda: self.clear_category(category=self.dlg.miscList,categorylist=self.warstwy_do_dodania['MISC'], callflag = PracowniaTm.get_misc.has_been_called))


            self.buttons = {'lidar': self.dlg.lidarButton,
                            'warstwy': self.dlg.warstwyButton,
                            'bdot10k': self.dlg.bdotButton,
                            'rastry': self.dlg.rasterButton,
                            'ewd': self.dlg.ewdButton,
                            'misc': self.dlg.miscButton,
                            'wekt': self.dlg.wektButton,
                            'wydzold': self.dlg.wydzOldButton}

        self.clearobr()

        self.populate_combo_box(self.dlg.adrForCb)
        self.populate_combo_box(self.dlg.multiplyCombo)
        self.populate_combo_box(self.dlg.mpCb)
        self.populate_combo_box(self.dlg.wydzKontrCb)
        self.populate_combo_box(self.dlg.oddzCb)
        self.populate_combo_box(self.dlg.opodstCb)
        self.populate_combo_box(self.dlg.o_podstLsCb)
        self.populate_combo_box(self.dlg.lsCb)

        #self.clear_listView()
        #self.clear_progressBars()

        self.dlg.bat.setStyleSheet("background-color:transparent;border:0;")
        self.root = QgsProject.instance().layerTreeRoot()
        self.canvas = iface.mapCanvas()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        QgsProject.instance().setCrs(self.CRS)

        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #argument pos określa pozycje, jednak jest ona zmienna za kazdym dodaniem wiec kolejnosc wykonania decyduje o pozycji)
            #QgsProject.instance().setCrs(self.CRS)
            self.add_misc(1)
            self.add_bdot(2)
            self.add_ewd(3)
            self.add_wlasne_warstwy(4)
            self.add_lidar(5)
            self.add_wektoryzacja(6)
            self.add_orto(7)
            self.add_wydz_old()
            self.dlg.close()

            iface.messageBar().pushMessage("Ukończono", "Wykonano, sprawdź wyniki", level=Qgis.Success,duration = 2)

    def zoom_to_layer(self,layer):
        canvas  = iface.mapCanvas()
        extent = layer.extent()
        canvas.setExtent(extent)
    def highlight_taks(self):
        self.TAKS = True
        self.TAKSEWD = False
        self.WEKT = False
        self.buttons['lidar'].setStyleSheet("border-color: orange")
        self.buttons['warstwy'].setStyleSheet("border-color: orange")
        self.buttons['bdot10k'].setStyleSheet("border-color: orange")
        self.buttons['rastry'].setStyleSheet("border-color: orange")
        self.buttons['ewd'].setStyleSheet(" ")
        self.buttons['misc'].setStyleSheet(" ")
        self.buttons['wekt'].setStyleSheet(" ")
        self.buttons['wydzold'].setStyleSheet("border-color: orange")
    def highlight_taksEwd(self):
        self.TAKS = False
        self.TAKSEWD = True
        self.WEKT = False
        self.buttons['lidar'].setStyleSheet("border-color: orange")
        self.buttons['warstwy'].setStyleSheet("border-color: orange")
        self.buttons['bdot10k'].setStyleSheet("border-color: orange")
        self.buttons['rastry'].setStyleSheet("border-color: orange")
        self.buttons['ewd'].setStyleSheet("border-color: orange")
        self.buttons['misc'].setStyleSheet(" ")
        self.buttons['wekt'].setStyleSheet(" ")
        self.buttons['wydzold'].setStyleSheet("border-color: orange")
    def highlight_wekt(self):
        self.TAKS = False
        self.TAKSEWD = False
        self.WEKT = True
        self.buttons['lidar'].setStyleSheet(" ")
        self.buttons['warstwy'].setStyleSheet("border-color: orange")
        self.buttons['bdot10k'].setStyleSheet(" ")
        self.buttons['rastry'].setStyleSheet("border-color: orange")
        self.buttons['ewd'].setStyleSheet("border-color: orange")
        self.buttons['misc'].setStyleSheet(" ")
        self.buttons['wekt'].setStyleSheet("border-color: orange")
        self.buttons['wydzold'].setStyleSheet("border-color: orange")
    def clear_kopiowanie(self):
        self.dlg.folderLine.clear()
        self.dlg.buttonGroup.setExclusive(False)
        self.dlg.taksEwdRadio.setChecked(False)
        self.dlg.taksRadio.setChecked(False)
        self.dlg.wektRadio.setChecked(False)
        self.dlg.buttonGroup.setExclusive(True)
        self.buttons['lidar'].setStyleSheet(" ")
        self.buttons['warstwy'].setStyleSheet(" ")
        self.buttons['bdot10k'].setStyleSheet(" ")
        self.buttons['rastry'].setStyleSheet(" ")
        self.buttons['ewd'].setStyleSheet(" ")
        self.buttons['misc'].setStyleSheet(" ")
        self.buttons['wekt'].setStyleSheet(" ")
        self.buttons['wydzold'].setStyleSheet(" ")
    def clear_baza(self):
        self.dlg.bazaLine.clear()
    def clear_wydzTm(self):
        self.dlg.wydzTmLine.clear()
    def msg_question(self, title, quest, parent):
        msgbox = QMessageBox
        answer = msgbox.question(parent, title, quest, msgbox.Yes | msgbox.No)
        if answer == msgbox.Yes:
            return msgbox
    def copy_ls_to_opodst(self):
        lsid = self.dlg.lsCb.currentIndex()
        opodstid = self.dlg.o_podstLsCb.currentIndex()
        ls  = self.layers[lsid]
        opodst = self.layers[opodstid]
        ls_fields = [field for field in ls.fields()]
        ls_fields_names = [field.name() for field in ls.fields()]
        opodst_fields_names = [field.name() for field in opodst.fields()]

        opodstkeys = {}
        lskeys = {}
        for field in opodst.fields():
            o_podst_idx = opodst.fields().indexFromName(field.name())
            opodstkeys[f'{field.name()}']= o_podst_idx
        for field in ls.fields():
            ls_idx = ls.fields().indexFromName(field.name())
            lskeys[f'{field.name()}'] = ls_idx
    def addObrtoCb(self):
        input = self.dlg.obrLine.text()
        if input != '0000' and len(input)==4 and input not in self.obreby:
            self.obreby.append(input)
            self.dlg.obrCb.addItem(input)
            self.dlg.obrLine.setText('0000')
    def clearobr(self):
        self.dlg.obrCb.clear()
        self.obreby.clear()
    def copy_ls_to_opodst_EZ(self):
        try:
            lsid = self.dlg.lsCb.currentIndex()
            opodstid = self.dlg.o_podstLsCb.currentIndex()
            ls = self.layers[lsid]
            opodst = self.layers[opodstid]

            iface.mainWindow().findChild(QAction, 'mActionDeselectAll').trigger()
            if opodst.name().lower() not in ['o_podst.shp','o_podst']:
                self.algorytmy.message('Przekopiuj LS',
                                       'Wskazana warstwa nie jest docelowa do kopiowania LS sprawdź poprawność i spróbuj ponownie',
                                       QMessageBox.Warning)
            elif ls.name().lower() not in ['ls.shp','ls','ls_all', 'ls_all.shp']:
                self.algorytmy.message('Przekopiuj LS',
                                       'Wskazana warstwa to nie LS sprawdź poprawność i spróbuj ponownie',
                                       QMessageBox.Warning)
            else:
                if not opodst.isEditable():
                    opodst.startEditing()
                    for obr in self.obreby:

                        expr = f'"OBR" LIKE \'{obr}\''
                        ls.selectByExpression(expr)
                        iface.copySelectionToClipboard(ls)
                        iface.pasteFromClipboard(opodst)
                    opodst.commitChanges()
                    iface.mainWindow().findChild(QAction, 'mActionDeselectAll').trigger()


                else:
                    self.algorytmy.message('Przekopiuj LS','Warstwa w trybie edycji. Wyłącz edycję, zamknij tabelę atrybutów i spróbuj ponownie', QMessageBox.Warning)
                    iface.mainWindow().findChild(QAction, 'mActionDeselectAll').trigger()
        except:
            self.algorytmy.message('Przekopiuj LS',
                                   'Wskaż warstwę lub coś poszło nie tak',
                                   QMessageBox.Warning)


    def copy(self,src,dst,lista=None):
        dialog, bar = self.progdialog(0)
        bar.setValue(0)
        bar.setMaximum(100)
        QApplication.processEvents()
        count = []
        i = 0
        if lista:
            for r,d,f in os.walk(src):
                for name in f:
                    nazwa = os.path.splitext(name)[0].lower()
                    if nazwa in lista:
                        i += 1
                        count.append(nazwa)
                        path = os.path.join(r,name)
                        shutil.copy2(path,dst)
                        progress = i / float(len(lista)*4) * 100
                        print(progress)
                        #print(len(count))
                        bar.setValue(progress)
                        QApplication.processEvents()
                        #print(path)
            webbrowser.open('file:///' + dst)
        else:
            shutil.copy2(src,dst)
            webbrowser.open('file:///' + dst)

    def xero(self): #MAMMMA MIA, PASTA LAVISTA EST SPAGHETTI BOLOGNESE , MOJE OCZY OD TYCH IFOW, GORZEJ JUZ TEGO NIE MOGLEM ZROBIC, DO POPRAWY
        if  self.dlg.bazaCb.isChecked() or self.dlg.warstwyCb.isChecked() or self.dlg.wydzTmCb.isChecked():
            baza_dir = self.dlg.bazaLine.text()
            dst_dir = self.dlg.folderLine.text()
            wydzTm_dir = self.dlg.wydzTmLine.text()
            warstwy_dir = self.resolve('PUSTE_WARSTWY')
            taksacjaEWD = ['o_podst','ob_liniowe','oddz','pnsw']
            wektoryzacja = taksacjaEWD
            taksacja = ['ob_liniowe','pnsw','wydz_tm']
            wydz_tm = ['wydz_tm']
            if os.path.exists(dst_dir):#czy ścieżka dst_dir jest prawidłowa
                pytanie = self.msg_question(title='Potwierdź przekopiowanie', quest=f"Czy na pewno przekopiować do: {os.path.basename(dst_dir)}", parent=self.dlg)
                if pytanie:#jeśli jest pewny kopiowania:
                    if not os.listdir(dst_dir):#sprawdzenie czy folder jest pusty (not listdir==True) = pusty
                        if self.dlg.warstwyCb.isChecked():#czy zaznaczyl kopiowanie warstw
                            if self.dlg.taksRadio.isChecked():
                                self.copy(warstwy_dir,dst_dir,taksacja)
                            elif self.dlg.taksEwdRadio.isChecked():
                                self.copy(warstwy_dir,dst_dir,taksacjaEWD)
                            elif self.dlg.wektRadio.isChecked():
                                self.copy(warstwy_dir,dst_dir,wektoryzacja)
                        if self.dlg.bazaCb.isChecked() :#czy zaznaczyl kopiowanie bazy
                            if os.path.exists(baza_dir):
                                self.copy(baza_dir,dst_dir)
                            else:
                                self.algorytmy.message('Przekopiuj warstwy','Taka baza nie istnieje, popraw ścieżkę', QMessageBox.Warning)
                        if self.dlg.wydzTmCb.isChecked():
                            if os.path.exists(wydzTm_dir):
                                self.copy(wydzTm_dir,dst_dir,wydz_tm)
                            else:
                                self.algorytmy.message('Przekopiuj warstwy', 'Taki folder z WYDZ_TM nie istnieje, popraw ścieżkę',
                                                       QMessageBox.Warning)
                    else: #mimo zawartosci folderu czy na pewno chce kopiowac
                        pytanie = self.msg_question(title='UWAGA:Potwierdź nadpisanie', quest="UWAGA!\n"
                        "Folder docelowy nie jest pusty, dalsze kopiowanie może nadpisać pliki i grozi utratą danych\n"
                                                                                              "Kontynuować?", parent=self.dlg)
                        if pytanie:
                            if self.dlg.warstwyCb.isChecked():
                                if self.TAKS:
                                    self.copy(warstwy_dir, dst_dir, taksacja)
                                if self.TAKSEWD:
                                    self.copy(warstwy_dir, dst_dir, taksacjaEWD)
                                if self.WEKT:
                                    self.copy(warstwy_dir, dst_dir, wektoryzacja)
                            if self.dlg.bazaCb.isChecked():
                                if os.path.exists(baza_dir):
                                    self.copy(baza_dir, dst_dir)
                                else:
                                    self.algorytmy.message('Przekopiuj warstwy',
                                                           'Taka baza nie istnieje, popraw ścieżkę',
                                                           QMessageBox.Warning)


            else:
                self.algorytmy.message('Przekopiuj warstwy','Taka ścieżka do Twojego folderu nie istnieje. Wskaż poprawną scieżkę \n'
                            'Kliknij OK by zamknąć to okno', QMessageBox.Warning)
        else:
            self.algorytmy.message('Przekopiuj warstwy','Zaznacz czy chcesz skopiować bazę czy warstwę \n'
                        'Kliknij OK by zamknąć to okno',QMessageBox.Warning)
    def get_baza_dir(self):
        PracowniaTm.get_baza.has_been_called = True
        path = QFileDialog.getOpenFileName(self.dlg,"Wskaż bazę danych", filter="Baza danych Access (*.mdb)")
        baza = path[0]
        self.dlg.bazaCopyLine.setText(baza)
    def get_wydzTm_dir(self):
        PracowniaTm.get_wydzTm_dir.has_been_called = True
        path = QFileDialog.getOpenFileName(self.dlg,"Wskaż WYDZ_TM ", filter="Shape files (*.shp)")
        wydztm = path[0]
        dir = os.path.dirname(wydztm)
        self.dlg.wydzTmLine.setText(dir)
    def get_baza(self):
        PracowniaTm.get_baza.has_been_called = True
        path = QFileDialog.getOpenFileName(self.dlg,"Wskaż bazę danych", filter="Baza danych Access (*.mdb)")
        baza = path[0]
        self.dlg.bazaLine.setText(baza)
    def get_folder_dir(self):
        path = QFileDialog.getExistingDirectory(self.dlg, 'Wskaż folder do stworzenia folderu z Twoim projektem')
        PracowniaTm.get_folder_dir.has_been_called = True
        self.dlg.taksEwdRadio.setChecked(True)
        self.dlg.folderLine.setText(path)
    def wydz_w_oddz(self):
        opodstId = self.dlg.opodstCb.currentIndex()
        oddzId = self.dlg.oddzCb.currentIndex()
        if opodstId >= 0 and oddzId >=0:
            opodst = self.layers[opodstId]
            oddz = self.layers[oddzId]
            self.algorytmy.wydz_oddz(opodst,oddz)
    def wydz_kontr(self):
        conn  = connect_db(self.dlg.bazaCopyLine.text())[0]
        wydzko1_df = get_table_data(conn,SQL['WYDZ_KO1'])
        wydzko2_df = get_table_data(conn,SQL['WYDZ_KO2'])
        print(wydzko1_df)
        #print(wydzko2_df)
        wydzko1 = df_to_layer(wydzko1_df,'1WYDZ_KO')
        wydzko2 = df_to_layer(wydzko2_df,'2WYDZ_KO')
        self.layersChosen = False
        opodstId = self.dlg.wydzKontrCb.currentIndex()
        #wydzko1Id = self.dlg.wydzko1Cb.currentIndex()
        #wydzko2Id = self.dlg.wydzko2Cb.currentIndex()
        if opodstId >= 0 and len(self.dlg.bazaCopyLine.text())> 0:
            self.layersChosen =  True

        if self.layersChosen:
            opodst = self.layers[opodstId]
            #wydzko2 = self.layers[wydzko2Id]
            #wydzko1 = self.layers[wydzko1Id]
            self.algorytmy.wydz_kontrola(opodst,wydzko1,wydzko2)
        else:
            self.algorytmy.message('WYDZ_KONTR','Wskaż wszystkie warstwy',QMessageBox.Warning)
    def multiparty(self):
        selectedLayerId = self.dlg.mpCb.currentIndex()
        print(selectedLayerId)
        if selectedLayerId >=0:
            lyr = self.layers[selectedLayerId]
            print (lyr.type())
            if  lyr.type() == QgsMapLayer.VectorLayer:
                self.algorytmy.auto_mp(lyr)
            else:
                self.algorytmy.message('autoMP','To nie jest warstwa wektorowa, sprawdź poprawność',QMessageBox.Warning)
    def create_adr_new(self):
        selectedLayerId = self.dlg.multiplyCombo.currentIndex()
        if selectedLayerId >=0:
            lyr  = self.layers[selectedLayerId]
            if lyr.name().lower() in ['o_podst', 'o_podst.shp','wydz_tm','wydz_tm.shp']:
                teryt = self.algorytmy.get_teryt(lyr)
                self.algorytmy.create_adr_new_easy(lyr,teryt)
            else:
                self.algorytmy.message('Rozmnóż wydzielenia',
                                       'Warstwa nie powinna być rozmnażana, wybierz poprawną warstwę\n'
                                       'Kliknij OK by zamknąć to okno', QMessageBox.Warning)
    def multiply_wydz(self):
        selecredLayerId = self.dlg.multiplyCombo.currentIndex()
        if selecredLayerId >= 0:
            lyr = self.layers[selecredLayerId]
            if lyr.name().lower() in ['o_podst','o_podst.shp', 'wydz_tm', 'wydz_tm.shp']:
                self.algorytmy.multiply(lyr)
            else:
                self.algorytmy.message('Rozmnóż wydzielenia','Warstwa nie powinna być rozmnażana, wybierz poprawną warstwę\n'
                            'Kliknij OK by zamknąć to okno', QMessageBox.Warning)
    def adr_for(self):
        teryt = self.dlg.adrForLine.text().upper()
        selectedLayerId = self.dlg.adrForCb.currentIndex()
        if selectedLayerId>=0:
            layer = self.layers[selectedLayerId]
            expr = QgsExpression(
                f'CASE WHEN \"WYDZ\" like \'_\' THEN  \'{teryt}\'  ||  \"OBR\"  || \'-10\' ||  \"ODDZ\"  || \'  -\' ||  \"WYDZ\"  || \'   -00\' WHEN \"WYDZ\" like \'__\' THEN  \'{teryt}\'  ||  \"OBR\"  || \'-10\' ||  \"ODDZ\"  || \'  -\' ||  \"WYDZ\"  || \'  -00\' WHEN \"WYDZ\" like \'___\' THEN  \'{teryt}\' ||  \"OBR\"  || \'-10\' ||  \"ODDZ\"  || \'  -\' ||  \"WYDZ\"  || \' -00\' WHEN \"WYDZ\" like \'____\' THEN  \'{teryt}\'  ||  \"OBR\"  || \'-10\' ||  \"ODDZ\"  || \'  -\' ||  \"WYDZ\"  || \'-00\'END    ')
            if len(teryt) != 6:
                msg = QMessageBox()
                msg.setWindowTitle('Oblicz ADR_FOR')
                msg.setText('TERYT powinien mieć 6 znaków. Sprawdź poprawność i spróbuj ponownie \n'
                            'Kliknij OK by zamknąć to okno')
                msg.setIcon(QMessageBox.Warning)
                msg.addButton(QMessageBox.Ok)
                msg.setWindowFlags(Qt.WindowStaysOnTopHint)
                dupa = msg.exec()
            else:
                if layer.name().lower() in ['o_podst.shp','wydz_tm.shp','o_podst', 'wydz_tm']:
                    dialog, bar = self.progdialog(0)
                    bar.setValue(0)
                    bar.setMaximum(100)
                    progress = 0
                    context = QgsExpressionContext()
                    context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer))
                    count = layer.featureCount()
                    if not layer.isEditable():
                        with edit(layer):
                            for i, f in enumerate(layer.getFeatures()):
                                context.setFeature(f)
                                f['adr_for'] = expr.evaluate(context)
                                layer.updateFeature(f)
                                progress = i / float(count) * 100
                                bar.setValue(progress)
                                QApplication.processEvents()
                        # iface.messageBar().pushMessage("Sukces", f"Obliczono adr_for. Kod TERYT:{teryt}", level=Qgis.Success,
                        # duration=5)
                    else:
                        self.algorytmy.message('ADR_FOR',
                                               'Warstwa w trybie edycji, wyłącz edycję, zamknij tabelę atrybutów i spróbuj ponownie\n'
                                               'Kliknij OK by zamknąć to okno', QMessageBox.Warning)
                else:
                    msg = QMessageBox()
                    msg.setWindowTitle('Oblicz ADR_FOR')
                    msg.setText('Warstwa nie powinna mieć obliczanego adr_for. Sprawdź poprawność i spróbuj ponownie \n'
                                'Kliknij OK by zamknąć to okno')
                    msg.setIcon(QMessageBox.Warning)
                    msg.addButton(QMessageBox.Ok)
                    msg.setWindowFlags(Qt.WindowStaysOnTopHint)
                    dupa = msg.exec()
        else:
            msg = QMessageBox()
            msg.setWindowTitle('Oblicz ADR_FOR')
            msg.setText('Wybierz warstwę. Sprawdź poprawność i spróbuj ponownie \n'
                        'Kliknij OK by zamknąć to okno')
            msg.setIcon(QMessageBox.Warning)
            msg.addButton(QMessageBox.Ok)
            msg.setWindowFlags(Qt.WindowStaysOnTopHint)
            dupa = msg.exec()
    def populate_combo_box(self,cb):
        self.layers = [layer for k, layer in QgsProject.instance().mapLayers().items()]
        # self.dlg.adrForCb.clear()
        # self.dlg.adrForCb.addItems([layer.name() for layer in self.layers ])
        cb.clear()
        cb.addItems([layer.name() for layer in self.layers])
    def progdialog(self,progress): #okienko do progressu obliczen
        dialog = QProgressDialog()
        dialog.setWindowTitle("Przeliczam...")
        dialog.setLabelText("Aktualizuję...")
        bar = QProgressBar(dialog)
        bar.setTextVisible(True)
        bar.setValue(progress)
        dialog.setBar(bar)
        dialog.setMinimumWidth(300)
        dialog.show()
        return dialog, bar
    def progress_changed(self,progress): #aktualizuje progress dla algorytmow professingu
        self.bar.setValue(progress)
    def resolve(self,name, basepath=None, bonus=None):
        if not basepath:
            basepath = os.path.dirname(os.path.abspath(__file__))
        if bonus:
            path = os.path.join(basepath,bonus,name)
        else:
            path = os.path.join(basepath,name)
        return path
    def set_style(self,layer,type,style,name):
        lyr = layer
        if lyr.geometryType() == type:
            lyr.loadNamedStyle(style[name])
            lyr.triggerRepaint()
        else:
            pass
    def get_wektoryzacja(self):
        PracowniaTm.get_wektoryzacja.has_been_called = True
        folderpath = QFileDialog.getExistingDirectory(self.dlg,'Wskaż folder zdo_wektoryzacji')
        extension = '.shp'
        self.wektoryzacja = []
        val = 0
        for r, d, f in os.walk(folderpath):
            for file in f:
                if file.endswith(extension):
                    fullpath = r+'/'+file
                    self.wektoryzacja.append(fullpath)
                    self.dlg.wektList.addItem(f'{file} ścieżka:{fullpath}')
                    val+=1
                    progress = (val -1)/float(val)*100
                    self.dlg.wektProgressBar.setValue(round(progress))
                    time.sleep(0.05)
                    QApplication.processEvents()
        if len(self.wektoryzacja) >0:
            self.dlg.wektProgressBar.setValue(100)
            self.wektoryzacja.sort()
        if self.dlg.wektProgressBar.value() ==100:
            self.dlg.wektLabel.setText('Odznacz niepotrzebne warstwy')
            self.dlg.wektList.selectAll()
        self.warstwy_do_dodania['WEKT'] = self.wektoryzacja
    def add_wektoryzacja(self,pos):
        if PracowniaTm.get_wektoryzacja.has_been_called:
            selected = [item.text() for item in self.dlg.wektList.selectedItems()]
            if len(selected) > 0:
                self.dialog,self.bar = self.progdialog(0)
                self.bar.setValue(0)
                self.bar.setMaximum(100)
                fb = QgsProcessingFeedback()
                fb.progressChanged.connect(self.progress_changed)
                QApplication.processEvents()

                shapeGroup = self.root.insertGroup(pos,'warstwy po TM')
                selected.sort()
                count = len(selected)
                for i,filename in enumerate(selected):
                    progValue = i+1
                    splitted = filename.split(sep= ' ścieżka:')
                    name = splitted[0].lower()
                    path = splitted[1]
                    layer = QgsVectorLayer(path,name)
                    layer.setCrs(self.CRS)
                    if self.dlg.styleCheckBox.isChecked() and name in self.OWN_WARSTWY:
                        self.set_style(layer,self.POLYGON, self.style['WARSTWY'],name)
                        self.set_style(layer, self.POINT, self.style['WARSTWY'], name)
                    QgsProject.instance().addMapLayer(layer,False)
                    shapeGroup.insertChildNode(1,QgsLayerTreeLayer(layer))
                    layernode = self.root.findLayer(layer.id())
                    layernode.setExpanded(True)
                    layernode.setExpanded(False)
                    progress = progValue/float(count)*100
                    self.bar.setValue(progress)
                    QApplication.processEvents()
                time.sleep(0.5)
                self.dialog.close()
                self.bar.setValue(0)

    def get_wydz_old(self):
        PracowniaTm.get_wydz_old.has_been_called = True
        wydz_old = QFileDialog.getOpenFileName(parent = self.dlg, caption='Wskaż wydz_old', filter = 'Shape files (*.shp)')
        self.dlg.wydzOldLine.setText(wydz_old[0])
    def add_wydz_old(self):
        if PracowniaTm.get_wydz_old.has_been_called:
            path = self.dlg.wydzOldLine.text()
            name = os.path.basename(path).lower()
            layer = QgsVectorLayer(path,name)
            QgsProject.instance().addMapLayer(layer, True)
            layer.setCrs(self.CRS)
            if self.dlg.styleCheckBox.isChecked():
                self.set_style(layer,self.POLYGON, self.style['EWIDENCJA'],name)
    def get_misc(self):
        PracowniaTm.get_misc.has_been_called = True
        filters = "Shape files (*.shp);;Zdjęcia (*.png *.xpm *.jpg *.tiff *.tif);;Bazy (*.dbf)"
        path = QFileDialog.getOpenFileNames(parent=self.dlg,caption='Wybierz warstwy',filter=filters)
        self.misc = []
        for i in path[0]:
            self.misc.append(path)
            name = os.path.basename(i)
            self.dlg.miscList.addItem(f'{name} ścieżka:{i}')
            self.dlg.miscProgresBar.setValue(100)
            QApplication.processEvents()
        if len(self.misc) >0:
            self.dlg.miscProgresBar.setValue(100)
        if self.dlg.miscProgresBar.value() == 100:
            self.dlg.miscLabel.setText('Odznacz niepotrzebne warstwy')
        self.warstwy_do_dodania['MISC']=self.misc
    def add_misc(self,pos):
        if PracowniaTm.get_misc.has_been_called:
            vect = ['.shp', '.dbf', '.gpkg']
            rast = ['.tif', '.tiff', '.jpg', '.jpeg', '.gif', '.bmp']
            selected = [item.text() for item in self.dlg.miscList.selectedItems()]
            if len(selected)>0:
                shapeGroup = self.root.insertGroup(pos,'Inne')
                shapeGroup.setExpanded(False)
                shapeGroup.setItemVisibilityChecked(False)
                selected.sort()
                for filename in selected:
                    splitted  = filename.split(sep = ' ścieżka:')
                    name = splitted[0].lower()
                    path = splitted[1]
                    ext = os.path.splitext(filename)[1]
                    if ext.lower() in vect:
                        layer = QgsVectorLayer(path,name)
                        try:
                            self.set_style(layer, self.POLYGON, self.style['WARSTWY'], name)
                            self.set_style(layer, self.LINE, self.style['WARSTWY'], name)
                            self.set_style(layer, self.POLYGON, self.style['EWIDENCJA'], name)
                            self.set_style(layer, self.POINT, self.style['EWIDENCJA'], name)
                            self.set_style(layer, self.LINE, self.style['EWIDENCJA'], name)
                            self.set_style(layer, self.POLYGON, self.style['BDOT10K'], name)
                            self.set_style(layer, self.POINT, self.style['BDOT10K'], name)
                            self.set_style(layer, self.LINE, self.style['BDOT10K'], name)
                            self.set_style(layer, self.POLYGON, self.style['LIDAR'], name)
                            self.set_style(layer, self.POINT, self.style['LIDAR'], name)
                            self.set_style(layer, self.LINE, self.style['LIDAR'], name)
                            QgsProject.instance().addMapLayer(layer, False)
                            shapeGroup.insertChildNode(1, QgsLayerTreeLayer(layer))
                            layer.setCrs(self.CRS)
                        except:
                            QgsProject.instance().addMapLayer(layer, False)
                            shapeGroup.insertChildNode(1, QgsLayerTreeLayer(layer))
                            layer.setCrs(self.CRS)
                    elif ext.lower() in rast:
                        layer = QgsRasterLayer(path,name)
                        QgsProject.instance().addMapLayer(layer, False)
                        shapeGroup.insertChildNode(1, QgsLayerTreeLayer(layer))

    def get_wlasne_warstwy_dir(self):
        PracowniaTm.get_wlasne_warstwy_dir.has_been_called = True
        folderpath = QFileDialog.getExistingDirectory(self.dlg, 'Wybierz Twój katalog roboczy')
        extension = '.shp'
        #self.dlg.warstwyList.clear()
        self.warstwy = []
        val = 0
        for r, d, f in os.walk(folderpath):
            for file in f:
                if file.endswith(extension):
                    fullpath = r+'/'+file
                    self.warstwy.append(fullpath)
                    #if file in self.OWN_WARSTWY:
                    self.dlg.warstwyList.addItem(f'{file} ścieżka:{fullpath}')
                    val += 1
                    progress = (val - 1) / float(val) * 100
                    # print(val,progress)
                    self.dlg.warstwyProgressBar.setValue(round(progress))
                    time.sleep(0.05)
                    QApplication.processEvents()
        if len(self.warstwy) > 0:
            self.dlg.warstwyProgressBar.setValue(100)
            self.warstwy.sort()
        if self.dlg.warstwyProgressBar.value() == 100:
            self.dlg.warstwyLabel.setText('Odznacz niepotrzebne warstwy')
            self.dlg.warstwyList.selectAll()
        self.warstwy_do_dodania['WARSTWY'] = self.warstwy
    def add_wlasne_warstwy(self,pos): #argument pos sluzy do wpisania pozycji w ToC
        if PracowniaTm.get_wlasne_warstwy_dir.has_been_called:
            selected = [item.text() for item in self.dlg.warstwyList.selectedItems()]

            if len(selected) > 0 :
                #ProgressBar
                self.dialog, self.bar = self.progdialog(0)
                self.bar.setValue(0)
                self.bar.setMaximum(100)
                fb = QgsProcessingFeedback()
                fb.progressChanged.connect(self.progress_changed)
                QApplication.processEvents()

                shapeGroup = self.root.insertGroup(pos,"mojeWarstwy")
                shapeGroup.setExpanded(False)
                selected.sort()
                count = len(selected)
                for i,filename in enumerate(selected):
                    progValue = i+1 #Wartość numeratora +1,żeby startowało od 1
                    splitted = filename.split(sep=' ścieżka:')
                    name = splitted[0].lower()
                    path = splitted[1]
                    #if name in self.OWN_WARSTWY:
                    layer = QgsVectorLayer(path,name)
                    layer.setCrs(self.CRS)
                    if self.dlg.styleCheckBox.isChecked() and name in self.OWN_WARSTWY:
                        self.set_style(layer,self.POLYGON, self.style['WARSTWY'], name)
                        self.set_style(layer, self.LINE, self.style['WARSTWY'], name)

                    QgsProject.instance().addMapLayer(layer, False)
                    shapeGroup.insertChildNode(1, QgsLayerTreeLayer(layer))
                    layerNode = self.root.findLayer(layer.id())
                    layerNode.setExpanded(True)
                    layerNode.setExpanded(False)
                    progress = progValue/float(count) *100 #kalkulator porgressu
                    self.bar.setValue(progress) #ustawienienie wartosci bara
                    QApplication.processEvents() #odswiezenie bara
                time.sleep(0.5)#czekamy zeby pokazac 100%
                self.dialog.close()#zamyka okno progressu
                self.bar.setValue(0) #czyscimy pasek postepu



    def get_orto_dir(self):
        PracowniaTm.get_orto_dir.has_been_called = True
        if PracowniaTm.get_orto_dir.has_been_called:
            folderpath =QFileDialog.getExistingDirectory(self.dlg,'Wybierz katalog ORTO')
            extensions = ['.tif','.tiff']
            val = 0
            for r, d, f in os.walk(folderpath):
                category = os.path.basename(r)
                self.ortoo[category] = []
                for i,file in enumerate(f):
                    if file.lower().endswith('.tif') or file.endswith('.tiff'):
                        base = os.path.basename(r)
                        if base in self.ortoo:
                            self.ortoo[base].append(r + '/' + file)
                            self.dlg.rasterList.addItem(file)
                    if file.lower().endswith('.shp'):
                        base = os.path.basename(r)
                        if base in self.ortoo:
                            self.ortoo[base].append(r+'/'+file)
                            self.dlg.rasterList.addItem(file)
                    val += 1
                    progress = (val - 1) / float(val) * 100
                    # print(progress)
                    self.dlg.rasterProgressBar.setValue(round(progress))
                    time.sleep(0.05)
                    QApplication.processEvents()
            if self.dlg.rasterProgressBar.value() != 100:
                self.dlg.rasterProgressBar.setValue(100)
            if self.dlg.rasterProgressBar.value() == 100:
                self.dlg.rasterLabel.setText('Dodane zostaną:')


    def add_orto(self,pos):
        if PracowniaTm.get_orto_dir.has_been_called:

            self.dialog, self.bar = self.progdialog(0)
            self.bar.setValue(0)
            self.bar.setMaximum(100)
            fb = QgsProcessingFeedback()
            fb.progressChanged.connect(self.progress_changed)
            QApplication.processEvents()

            groups = {}
            for key in self.ortoo:
                count = len(self.ortoo[key])
                if count > 0:
                    groups[key] = self.root.insertGroup(pos, key)
                    groups[key].setExpanded(False)
                    groups[key].setItemVisibilityChecked(False)
                    for i,file in  enumerate(self.ortoo[key]):
                        progValue = i+1
                        if file.lower().endswith('.tiff') or file.lower().endswith('.tif'):
                            name = os.path.basename(file)
                            layer = QgsRasterLayer(file,name)
                            QgsProject.instance().addMapLayer(layer, False)
                            groups[key].insertChildNode(1,QgsLayerTreeLayer(layer))
                            progress = progValue / float(count) * 100  # kalkulator porgressu
                            self.bar.setValue(progress)  # ustawienienie wartosci bara
                            QApplication.processEvents()  # odswiezenie bara
                            self.bar.setValue(0)
                        if file.lower().endswith('.shp'):
                            try:
                                name = os.path.basename(file)
                                layer = QgsVectorLayer(file, name)
                                self.set_style(layer, self.POLYGON, self.style['WARSTWY'], name)
                                self.set_style(layer, self.LINE, self.style['WARSTWY'], name)
                                self.set_style(layer, self.POLYGON, self.style['EWIDENCJA'], name)
                                self.set_style(layer, self.POINT, self.style['EWIDENCJA'], name)
                                self.set_style(layer, self.LINE, self.style['EWIDENCJA'], name)
                                self.set_style(layer, self.POLYGON, self.style['BDOT10K'], name)
                                self.set_style(layer, self.POINT, self.style['BDOT10K'], name)
                                self.set_style(layer, self.LINE, self.style['BDOT10K'], name)
                                self.set_style(layer, self.POLYGON, self.style['LIDAR'], name)
                                self.set_style(layer, self.POINT, self.style['LIDAR'], name)
                                self.set_style(layer, self.LINE, self.style['LIDAR'], name)
                                QgsProject.instance().addMapLayer(layer, False)
                                groups[key].insertChildNode(1, QgsLayerTreeLayer(layer))
                                progress = progValue / float(count) * 100  # kalkulator porgressu
                                self.bar.setValue(progress)  # ustawienienie wartosci bara
                                QApplication.processEvents()  # odswiezenie bara
                                self.bar.setValue(0)
                            except:
                                name = os.path.basename(file)
                                layer = QgsVectorLayer(file, name)
                                QgsProject.instance().addMapLayer(layer, False)
                                groups[key].insertChildNode(1, QgsLayerTreeLayer(layer))
                                progress = progValue / float(count) * 100  # kalkulator porgressu
                                self.bar.setValue(progress)  # ustawienienie wartosci bara
                                QApplication.processEvents()  # odswiezenie bara
                                self.bar.setValue(0)
            time.sleep(0.5)
            self.dialog.close()


    # def get_rasters_dir(self):
    #     PracowniaTm.get_rasters_dir.has_been_called = True
    #     if PracowniaTm.get_rasters_dir.has_been_called:
    #         folderpath = QFileDialog.getExistingDirectory(self.dlg,'Wybierz katalog z rastrami')
    #         extension = '.tif'
    #         self.dlg.rasterList.clear()
    #         self.rastry = []
    #         val = 0
    #         for r, d, f, in os.walk(folderpath):
    #             for i,file in enumerate(f):
    #                 if file.lower().endswith(extension):
    #                     fullpath = r+'/'+file
    #                     self.rastry.append(fullpath)
    #                     self.dlg.rasterList.addItem(file)
    #                     val += 1
    #                     progress = (val-1) / float(val) * 100
    #                     #print(progress)
    #                     self.dlg.rasterProgressBar.setValue(round(progress))
    #                     time.sleep(0.05)
    #                     QApplication.processEvents()
    #                     #print(file)
    #         if len(self.rastry) > 0:
    #             self.dlg.rasterProgressBar.setValue(100)
    #         if self.dlg.rasterProgressBar.value() ==100:
    #             self.dlg.rasterLabel.setText('Dodane zostaną:')
    #     self.warstwy_do_dodania['ORTO'] = self.rastry
    # def add_rasters(self,pos):
    #     if PracowniaTm.get_rasters_dir.has_been_called:
    #         if len(self.warstwy_do_dodania['ORTO']) > 0 :
    #             #ProgressBar
    #             self.dialog, self.bar = self.progdialog(0)
    #             self.bar.setValue(0)
    #             self.bar.setMaximum(100)
    #             fb = QgsProcessingFeedback()
    #             fb.progressChanged.connect(self.progress_changed)
    #             QApplication.processEvents()
    #
    #             shapeGroup = self.root.insertGroup(pos,'Rastry')
    #             shapeGroup.setExpanded(False)
    #             count = len(self.warstwy_do_dodania['ORTO'])
    #             for i,filename in enumerate(self.warstwy_do_dodania['ORTO']):
    #                 progValue = i+1
    #                 name = os.path.basename(filename)
    #                 layer = QgsRasterLayer(filename,name)
    #                 QgsProject.instance().addMapLayer(layer,False)
    #                 shapeGroup.insertChildNode(1,QgsLayerTreeLayer(layer))
    #                 layerNode = self.root.findLayer(layer.id())
    #                 layerNode.setExpanded(True)
    #                 layerNode.setExpanded(False)
    #                 progress = progValue / float(count) * 100  # kalkulator porgressu
    #                 self.bar.setValue(progress)  # ustawienienie wartosci bara
    #                 QApplication.processEvents()  # odswiezenie bara
    #
    #
    #             #self.rastry.clear()
    #             time.sleep(0.5)  # czekamy zeby pokazac 100%
    #             self.dialog.close()  # zamyka okno progressu
    #             self.bar.setValue(0)  # czyscimy pasek postepu
    def get_ewd_dir(self):
        PracowniaTm.get_ewd_dir.has_been_called = True
        folderpath = QFileDialog.getExistingDirectory(self.dlg,'Wybierz katalog z ewidencją (folder shp)')
        extension  = '.shp'
        if PracowniaTm.get_ewd_dir.has_been_called:
            self.dlg.ewdProgressBar.setValue(0)
        self.dlg.ewdList.clear()
        self.ewd = []
        val = 0
        for r, d, f in os.walk(folderpath):
            for file in f:
                if file.endswith(extension):
                    fullpath = r +'/'+file
                    if file.lower() in self.EWIDENCJA:
                        self.ewd.append(fullpath)
                        self.dlg.ewdList.addItem(file)
                        val += 1
                        progress = (val-1) / float(val) * 100
                        #print(val,progress)
                        self.dlg.ewdProgressBar.setValue(round(progress))
                        time.sleep(0.05)
                        QApplication.processEvents()
        if len(self.ewd) > 0:
            self.dlg.ewdProgressBar.setValue(100)
        if self.dlg.ewdProgressBar.value()==100:
            self.dlg.ewdLabel.setText('Dodane zostaną:')

        self.warstwy_do_dodania['EWD'] = self.ewd
    def add_ewd(self,pos):
        if PracowniaTm.get_ewd_dir.has_been_called:
            if len(self.warstwy_do_dodania['EWD']) >0:
                # ProgressBar
                self.dialog, self.bar = self.progdialog(0)
                self.bar.setValue(0)
                self.bar.setMaximum(100)
                fb = QgsProcessingFeedback()
                fb.progressChanged.connect(self.progress_changed)
                QApplication.processEvents()

                shapeGroup = self.root.insertGroup(pos,'Ewidencja')
                shapeGroup.setExpanded(False)
                shapeGroup.setItemVisibilityChecked(False)
                count = len(self.ewd)
                for i,filename in enumerate(self.warstwy_do_dodania['EWD']):
                    progValue = i+1
                    name = os.path.basename(filename).lower()
                    print(name)
                    if name in self.EWIDENCJA:
                        layer = QgsVectorLayer(filename,name)
                        layer.setCrs(self.CRS)
                        if self.dlg.styleCheckBox.isChecked():
                            self.set_style(layer, self.POLYGON, self.style['EWIDENCJA'], name)
                            self.set_style(layer, self.POINT, self.style['EWIDENCJA'], name)
                            self.set_style(layer,self.LINE,self.style['EWIDENCJA'],name)
                        QgsProject.instance().addMapLayer(layer,False)
                        shapeGroup.insertChildNode(1,QgsLayerTreeLayer(layer))
                        layerNode = self.root.findLayer(layer.id())
                        layerNode.setExpanded(True)
                        layerNode.setExpanded(False)
                    progress = progValue / float(count) * 100  # kalkulator porgressu
                    self.bar.setValue(progress)  # ustawienienie wartosci bara
                    QApplication.processEvents()  # odswiezenie bara
                time.sleep(0.5)  # czekamy zeby pokazac 100%
                self.dialog.close()  # zamyka okno progressu
                self.bar.setValue(0)  # czyscimy pasek postepu
                #self.ewd.clear()

    def get_bdot_dir(self):
        PracowniaTm.get_bdot_dir.has_been_called = True
        folderpath = QFileDialog.getExistingDirectory(self.dlg,'Wybierz katalog BDOT10K')
        extension = '.shp'
        self.dlg.bdotList.clear()
        self.bdot = []
        val = 0
        for r, d, f in os.walk(folderpath):
            for file in f:
                if file.endswith(extension):
                    fullpath = r +'/'+ file
                    if file.lower() in self.BDOT:
                        self.bdot.append(fullpath)
                        self.dlg.bdotList.addItem(file)
                        val += 1
                        progress = (val-1) / float(val) * 100
                        self.dlg.bdotProgressBar.setValue(round(progress))
                        time.sleep(0.05)
                        QApplication.processEvents()
        if len(self.bdot) > 0:
            self.dlg.bdotProgressBar.setValue(100)
        if self.dlg.bdotProgressBar.value()==100:
            self.dlg.bdotLabel.setText('Dodane zostaną:')
        self.warstwy_do_dodania['BDOT10K'] = self.bdot
    def add_bdot(self,pos):
        if PracowniaTm.get_bdot_dir.has_been_called:
            if len(self.warstwy_do_dodania['BDOT10K']) > 0:
                # ProgressBar
                self.dialog, self.bar = self.progdialog(0)
                self.bar.setValue(0)
                self.bar.setMaximum(100)
                fb = QgsProcessingFeedback()
                fb.progressChanged.connect(self.progress_changed)
                QApplication.processEvents()

                shapeGroup = self.root.insertGroup(pos,'BDOT10k')
                shapeGroup.setExpanded(False)
                shapeGroup.setItemVisibilityChecked(False)
                count = len(self.bdot)
                for i,filename in enumerate(self.warstwy_do_dodania['BDOT10K']):
                    progValue = i+1
                    name = os.path.basename(filename).lower()
                    if name in self.BDOT:
                        layer = QgsVectorLayer(filename,name)
                        layer.setCrs(self.CRS)
                        if self.dlg.styleCheckBox.isChecked() and name in self.BDOT:
                            self.set_style(layer, self.POLYGON, self.style['BDOT10K'], name)
                            self.set_style(layer, self.POINT, self.style['BDOT10K'], name)
                            self.set_style(layer,self.LINE,self.style['BDOT10K'],name)
                        QgsProject.instance().addMapLayer(layer,False)
                        shapeGroup.insertChildNode(1,QgsLayerTreeLayer(layer))
                        layerNode = self.root.findLayer(layer.id())
                        layerNode.setExpanded(True)
                        layerNode.setExpanded(False)
                    progress = progValue / float(count) * 100  # kalkulator porgressu
                    self.bar.setValue(progress)  # ustawienienie wartosci bara
                    QApplication.processEvents()  # odswiezenie bara
                time.sleep(0.5)  # czekamy zeby pokazac 100%
                self.dialog.close()  # zamyka okno progressu
                self.bar.setValue(0)  # czyscimy pasek postepu
                #self.bdot.clear()


    def get_lidar_dir(self):
        PracowniaTm.get_lidar_dir.has_been_called = True
        folderpath = QFileDialog.getExistingDirectory(self.dlg, 'Wybierz katalog z danymi LIDAR')
        extension = '.shp'
        #self.dlg.lidarList.clear()
        self.lidar = []
        val = 0
        for r, d, f in os.walk(folderpath):
            for file in f:
                if file.lower().endswith(extension):
                    fullpath = r + '/' + file
                    self.lidar.append(fullpath)
                    # if file in self.OWN_WARSTWY:
                    self.dlg.lidarList.addItem(f'{file} ścieżka:{fullpath}')
                    val += 1
                    progress = (val - 1) / float(val) * 100
                    # print(val,progress)
                    self.dlg.lidarProgressBar.setValue(round(progress))
                    time.sleep(0.05)
                    QApplication.processEvents()
        if len(self.lidar) > 0:
            self.dlg.lidarProgressBar.setValue(100)
        if self.dlg.lidarProgressBar.value() == 100:
            self.dlg.lidarLabel.setText('Odznacz niepotrzebne warstwy')
            self.dlg.lidarList.selectAll()
        self.warstwy_do_dodania['LIDAR'] = self.lidar

    def add_lidar(self,pos):
        if PracowniaTm.get_lidar_dir.has_been_called:
            selected = [item.text() for item in self.dlg.lidarList.selectedItems()]
            if len(selected) > 0:
                # ProgressBar
                self.dialog, self.bar = self.progdialog(0)
                self.bar.setValue(0)
                self.bar.setMaximum(100)
                fb = QgsProcessingFeedback()
                fb.progressChanged.connect(self.progress_changed)
                QApplication.processEvents()

                shapeGroup = self.root.insertGroup(pos,'LIDAR')
                shapeGroup.setExpanded(False)
                shapeGroup.setItemVisibilityChecked(False)
                selected.sort()
                count = len(selected)
                for i,filename in enumerate(selected):
                    progValue = i+1
                    splitted = filename.split(sep=' ścieżka:')
                    name = splitted[0].lower()
                    path = splitted[1]
                    #if name in self.LIDAR:
                    layer = QgsVectorLayer(path,name)
                    layer.setCrs(self.CRS)

                    if self.dlg.styleCheckBox.isChecked() and name in self.LIDAR:
                        self.set_style(layer, self.POLYGON, self.style['LIDAR'], name)
                        self.set_style(layer, self.POINT, self.style['LIDAR'], name)
                        self.set_style(layer, self.LINE, self.style['LIDAR'], name)

                    QgsProject.instance().addMapLayer(layer,False)
                    shapeGroup.insertChildNode(1,QgsLayerTreeLayer(layer))

                    layerNode = self.root.findLayer(layer.id())
                    layerNode.setExpanded(True)
                    layerNode.setExpanded(False)
                    progress = progValue / float(count) * 100  # kalkulator porgressu
                    self.bar.setValue(progress)  # ustawienienie wartosci bara
                    QApplication.processEvents()  # odswiezenie bara

                time.sleep(0.5)  # czekamy zeby pokazac 100%
                self.dialog.close()  # zamyka okno progressu
                self.bar.setValue(0)  # czyscimy pasek postepu

